# Directory variables
INC_DIR = ./include
SRC_DIR = ./src
BUILD_DIR = ./builds

# App name
TARGET = structs

# Compiler settings
CXX = g++
CXXFLAGS = -Wall -Wextra -Wpedantic -g -std=c++17 -I$(INC_DIR) -MMD -MP

# Header files
CPPFLAGS = -I$(INC_DIR)

# Find all .cpp files
SRCS := $(wildcard *.cpp) $(wildcard $(SRC_DIR)/*.cpp)

# Generate object file names in the build directory
OBJS := $(patsubst %.cpp,$(BUILD_DIR)/%.o,$(notdir $(SRCS)))

# Generate dependency file names from object file names
DEPS := $(OBJS:.o=.d)

# --------- Build --------

.PHONY: all run clean

run: $(TARGET)
	@./$(TARGET)
all: $(TARGET)

# Rule to link the final executable
$(TARGET): $(OBJS)
	@echo "==> Linking $@..."
	$(CXX) $(OBJS) -o $@

# VPATH tells make where to find source files.
VPATH = .:$(SRC_DIR)

# Compile .cpp files
$(BUILD_DIR)/%.o: %.cpp
	@mkdir -p $(BUILD_DIR)
	@echo "==> Compiling $<..."
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@

# Rule to clean up all generated files
clean:
	@echo "==> Cleaning project..."
	rm -rf $(BUILD_DIR) $(TARGET)

# Include the dependency files generated by the compiler.
-include $(DEPS)

